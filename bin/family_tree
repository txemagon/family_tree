#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'family_tree.rb'

$logger = Logger.new(STDERR)
$logger.level = Logger::UNKNOWN

class App
  include Methadone::Main
  include Methadone::CLILogging
  include FamilyTree
  include FamilyTree::Errors

  main do |tree_file|

    $logger.level = Logger::INFO if options[:verbose]

    line = ""
    begin
      line << ARGF.read_nonblock(1)
      line << ARGF.read
    rescue Errno::ENOENT => e
      STDERR.puts e.message
    rescue 
      STDERR.puts "Type your tree using net format. Ctrl-D to finish."
      line = ARGF.read
    end
    
    Driver::go line, options[:lexer]
  end

  # supplemental methods here

  # Declare command-line interface here

  description( "Generates a diagram of the family tree.\n" +
               "Example: \t#{$0} file.txt\n" +
               "Example: \t#{$0} <<< \"(Txema, Laura)\"\n" +
               "Example: \t#{$0} < examples/siblings.txt\n"  +
               "Example: \tcat file.txt | #{$0} ")

  # Default options
  options[:format] = "dot"
  options[:lexer]  = "none"

  # Accept flags via:
  # options[flag] will contain VAL
  on("-f", "--format VAL","Default output format", "(dot|net)")
  on("-l", "--lexer VAL" ,"Lexer output format"  , "(none|yaml|xml)")

  # Specify switches via:
  # on("--[no-]switch","Some switch")
  on("-v", "--verbose", "verbose ouptut")

  #
  # Or, just call OptionParser methods on opts

  # Require an argument
  # arg :arg 

  # # Make an argument optional
  arg :tree_file, :optional

  version FamilyTree::VERSION

  use_log_level_option

  go!
end
